# -----------------------------------------------------
# Quentin HUAN 06/2024
# 
# This script generate a complete old glass panel model:
#   - Surfaces are defined by 2 heightmaps (.exr files) 
#   - The bubble voxel grid is generated by the bubble_generator.py script
#   - The Refractive Index Field (RIF) is generated by the RIF_generator.py and filament_sdf.py scripts
#   - Given the panel shape and surface, the script modifies the heightmaps to account for interactions between the bubbles / chords and the surface (e.g. a bubble that is close to the surface will create a little bump on the surface). see crosstalk.py script
#
# Accounting for all these effects is quite important to get a realistic looking glass and can be easily observed on real handblown glass panels.
#
#
# DEPENDENCIES:
# Numpy, opencv, scipy, matplotlib, perlin_numpy, drjit
#
# for opencv, you can use:
# pip3 install opencv-python
#
# for perlin_numpy:
# pip3 install git+https://github.com/pvigier/perlin-numpy 
# (see https://github.com/pvigier/perlin-numpy)
#
# for drjit, use v0.4.6 
#  https://drjit.readthedocs.io/en/v0.4.6/
# -----------------------------------------------------

from matplotlib import pyplot as plt
import numpy as np
import bubble_generator as bgen
import RIF_generator as RIFgen
from vol_exporter import *
from crosstalk import cross_talk
import drjit as dr
from drjit.cuda import Float, UInt32, Array3f, Array2f, TensorXf, Texture3f, PCG32, Loop

import cv2
from os import environ
environ["OPENCV_IO_ENABLE_OPENEXR"] = "true"

## PARAMETERS:
# e: panel width
# heightmap_front and heightmap_back : path to front and back heightmaps
# H1 and H2 the heightmaps strength
# bubble_shape: bubble voxel resolution {x,y,z}
# bubble_density: 0 for no bubbles, 1 for potentially 1 bubble per voxel ( random position so its generally a bit less than that)
# RIF_shape: RIF voxel resolution
# chord_throughtput: set at bigger values for bigger chords
# eta_base: ior if the panel was perfectly homogeneous
# delta_eta: maximum amplitude of the RIF heterogeneities. Set it at |ior_glass-ior_chords|
# restore_RIF_from_file: restore previously generated RIF for faster panel regeneration (e.g. if only bubbles changed and heighmaps changed)
def generate_panel(outfolder, panel_name, seed, e, heightmap_front, heightmap_back, H1, H2, bubble_shape, radius_range, bubble_density, RIF_shape, chord_throughtput, chord_protuberance, eta_base=1.54, delta_eta=0.0005, gathering_zone=0.3, restore_RIF_from_file=False, debug=False, no_bubbles=False, no_chords=False, no_surface=False):

    print("=================")
    print("Generate panel ", panel_name, ": ")

    np.random.seed(0)

    # panel (L,H,W) dimensions
    panel_dimension = (1,1,e+H1+H2)

    ## SURFACE PARAMETERS
    heightmap_front = cv2.imread(heightmap_front, cv2.IMREAD_ANYCOLOR | cv2.IMREAD_ANYDEPTH)
    heightmap_back = cv2.imread(heightmap_back, cv2.IMREAD_ANYCOLOR | cv2.IMREAD_ANYDEPTH)

    ###########################
    #  SURFACE PREPROCESSING  #
    ###########################

    ## normalize heightmaps
    heightmap_front = heightmap_front/np.max(heightmap_front)
    heightmap_front = heightmap_front - np.min(heightmap_front)
    heightmap_back = heightmap_back/np.max(heightmap_back)
    heightmap_back = heightmap_back - np.min(heightmap_back)

    sdf_bake_dimension = (256,256,256)

    ######################
    #  GENERATE BUBBLES  #
    ######################
    print("generate bubbles")
    bubble_distrib = bgen.random_bubble_distrib_alexander(bubble_shape, radius_range, bubble_density, panel_dimension, seed)

    ##################
    #  GENERATE RIF  #
    ##################
    print("generate RIF")
    RIF = np.ones(RIF_shape)
    SDF_RIF = np.ones(sdf_bake_dimension)
    if(restore_RIF_from_file):
        ## load previously generated RIF
        RIF = np.load("RIF.npy")
        SDF_RIF = np.load("SDF_RIF.npy")
    else:
        ## generate new RIF distribution
        RIF, SDF_RIF = RIFgen.generate_RIF(RIF_shape, sdf_bake_dimension, eta_base, delta_eta, seed, panel_dimension[2], chord_throughtput, not restore_RIF_from_file, debug)
        np.save("SDF_RIF", SDF_RIF)
        np.save("RIF", RIF)

    #######################################################################
    #                    SURFACE AND BUBBLES INTERACTIONS                 #
    #######################################################################


    heightmap_front_crosstalk, heightmap_back_crosstalk = cross_talk(heightmap_front, heightmap_back, H1, H2, e, bubble_distrib, bubble_shape, radius_range, panel_dimension, sdf_bake_dimension, SDF_RIF, no_surface, no_bubbles, no_chords)

    #######################################################################
    #                             VISUALIZER                              #
    #######################################################################


    if(debug):
        fig, ax = plt.subplots(2,3)
        ## front panel heightmaps
        ax[0, 0].set_title("Front panel")
        ax[0, 0].imshow(heightmap_front*H1, vmin=0, vmax=H1)

        ax[0, 1].set_title("crossTalk")
        ax[0, 1].imshow(np.abs(heightmap_front*H1-heightmap_front_crosstalk), vmin=0, vmax=0.1*H1)

        ax[0, 2].set_title("final")
        print(heightmap_front_crosstalk)
        ax[0, 2].imshow(heightmap_front_crosstalk, vmin=0, vmax=H1)

        ## back panel heightmaps
        ax[1, 0].set_title("Back panel")
        ax[1, 0].imshow(heightmap_back*H2, vmin=0, vmax=H2)

        ax[1, 1].set_title("crossTalk")
        ax[1, 1].imshow(np.abs(heightmap_back*H2-heightmap_back_crosstalk), vmin=0, vmax=0.1*H2)

        ax[1, 2].set_title("final")
        ax[1, 2].imshow(heightmap_back_crosstalk, vmin=0, vmax=H2)
        plt.show()

    #######################################################################
    #                             DATA EXPORT                             #
    #######################################################################
    print("Export data to " + outfolder + panel_name + "/")
    cv2.imwrite(outfolder+panel_name+"/heightmap_front.exr", np.asarray(heightmap_front_crosstalk.T, dtype=np.float32))
    cv2.imwrite(outfolder+panel_name+"/heightmap_back.exr", np.asarray(heightmap_back_crosstalk.T, dtype=np.float32))

    export_to_vol(outfolder+panel_name+"/RIF.vol", np.asarray(RIF.T, dtype=np.float32), RIF.shape)

    export_to_bubble(outfolder+panel_name+"/bubbles.bubble", np.asarray(bubble_distrib, dtype=np.float32), bubble_shape)

    cv2.imwrite(outfolder+panel_name+"/bubble_debug.exr", np.asarray(bubble_distrib[:,:,0,:], dtype=np.float32))



